// Code generated by MockGen. DO NOT EDIT.
// Source: pluginapi.go

// Package mock_pluginapi is a generated GoMock package.
package mock_pluginapi

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mattermost_plugin_api "github.com/mattermost/mattermost/server/public/pluginapi"
	model "github.com/mattermost/mattermost/server/public/model"
)

// MockBotService is a mock of BotService interface.
type MockBotService struct {
	ctrl     *gomock.Controller
	recorder *MockBotServiceMockRecorder
}

// MockBotServiceMockRecorder is the mock recorder for MockBotService.
type MockBotServiceMockRecorder struct {
	mock *MockBotService
}

// NewMockBotService creates a new mock instance.
func NewMockBotService(ctrl *gomock.Controller) *MockBotService {
	mock := &MockBotService{ctrl: ctrl}
	mock.recorder = &MockBotServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotService) EXPECT() *MockBotServiceMockRecorder {
	return m.recorder
}

// EnsureBot mocks base method.
func (m *MockBotService) EnsureBot(arg0 *model.Bot, arg1 ...mattermost_plugin_api.EnsureBotOption) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnsureBot", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureBot indicates an expected call of EnsureBot.
func (mr *MockBotServiceMockRecorder) EnsureBot(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureBot", reflect.TypeOf((*MockBotService)(nil).EnsureBot), varargs...)
}
